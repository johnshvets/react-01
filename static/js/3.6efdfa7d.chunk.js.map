{"version":3,"sources":["hoc/withAuthRedirect.jsx","components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/DialogItem.tsx","components/Dialogs/Message/Message.jsx","components/Dialogs/MessageForm/MessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","id","name","className","classes","dialog","Message","message","maxMessageLength","maxLength","MessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","rows","validate","requiredField","Dialogs","dialogElement","dialogPage","dialogs","map","key","messageElement","messages","dialogWrapper","values","sendMessage","newMessageText","compose","dispatch","sendMessageCreator"],"mappings":"kNAIMA,EAAkB,SAACC,GAAD,MAAY,CAAEC,OAAQD,EAAME,KAAKD,SAE5CE,EAAmB,SAACC,GAAe,IACxCC,EADuC,uKAGzC,OAAKC,KAAKC,MAAMN,OAET,kBAACG,EAAcE,KAAKC,OAFI,kBAAC,IAAD,CAAUC,GAAI,eAHJ,GACbC,IAAML,WAYtC,OAJqCM,YAAQX,EAARW,CACnCL,K,oBCfJM,EAAOC,QAAU,CAAC,cAAgB,+BAA+B,QAAU,yBAAyB,SAAW,4B,6JCgBhGC,EARyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAC7C,OACE,yBAAKC,UAAWC,IAAQC,QACtB,kBAAC,IAAD,CAASV,GAAE,mBAAcM,IAAOC,K,kBCDvBI,EARC,SAACZ,GACf,OACE,yBAAKS,UAAWC,IAAQG,SACtB,2BAAIb,EAAMa,W,kCCDVC,EAAmBC,YAAU,KAmBpBC,EAFUC,YAAU,CAAEC,KAAM,qBAAlBD,EAfL,SAACjB,GACnB,OACE,0BAAMmB,SAAUnB,EAAMoB,cACpB,kBAACC,EAAA,EAAD,CACEC,UAAWC,IACXf,KAAK,iBACLgB,YAAY,qBACZC,KAAK,IACLC,SAAU,CAACC,IAAeb,KAE5B,4CCcSc,EAzBC,SAAC5B,GACf,IAAM6B,EAAgB7B,EAAM8B,WAAWC,QAAQC,KAAI,SAACrB,GAAD,OACjD,kBAAC,EAAD,CAAYH,KAAMG,EAAOH,KAAMD,GAAII,EAAOJ,GAAI0B,IAAKtB,EAAOJ,QAGtD2B,EAAiBlC,EAAM8B,WAAWK,SAASH,KAAI,SAACnB,GAAD,OACnD,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAASoB,IAAKpB,EAAQN,QAOlD,OACE,0BAAME,UAAWC,IAAQ0B,eACvB,6BAAS3B,UAAWC,IAAQqB,SAAUF,GAEtC,6BAASpB,UAAWC,IAAQyB,UAC1B,6BAAMD,GACN,kBAAC,EAAD,CAAkBf,SAVF,SAACkB,GACrBrC,EAAMsC,YAAYD,EAAOE,sB,wBCCdC,4BACbrC,aAXsB,SAACV,GAAD,MAAY,CAClCqC,WAAYrC,EAAMqC,eAGO,SAACW,GAAD,MAAe,CACxCH,YAAa,SAACC,GACZE,EAASC,YAAmBH,SAM9B3C,IAFa4C,CAGbZ","file":"static/js/3.6efdfa7d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst mapStateToProps = (state) => ({ isAuth: state.auth.isAuth });\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to={\"/login\"} />;\r\n\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  const ConnectAuthRedirectComponent = connect(mapStateToProps)(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectAuthRedirectComponent;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogWrapper\":\"Dialogs_dialogWrapper__npRYv\",\"dialogs\":\"Dialogs_dialogs__3dFKh\",\"messages\":\"Dialogs_messages__3Zpad\"};","import React from \"react\";\r\nimport classes from \"./DialogItem.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\nconst DialogItem: React.FC<PropsType> = ({ id, name }) => {\r\n  return (\r\n    <div className={classes.dialog}>\r\n      <NavLink to={`/dialogs/${id}`}>{name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport classes from \"./Message.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className={classes.message}>\r\n      <p>{props.message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLength, requiredField } from \"../../../utils/validators\";\r\nimport { Textarea } from \"../../common/FormControls/FormControls\";\r\n\r\nconst maxMessageLength = maxLength(100);\r\n\r\nconst MessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        name=\"newMessageText\"\r\n        placeholder=\"Enter your message\"\r\n        rows=\"3\"\r\n        validate={[requiredField, maxMessageLength]}\r\n      />\r\n      <button>Send</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst MessageFormRedux = reduxForm({ form: \"dialogMessageForm\" })(MessageForm);\r\n\r\nexport default MessageFormRedux;\r\n","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./Dialog/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport MessageFormRedux from \"./MessageForm/MessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n  const dialogElement = props.dialogPage.dialogs.map((dialog) => (\r\n    <DialogItem name={dialog.name} id={dialog.id} key={dialog.id} />\r\n  ));\r\n\r\n  const messageElement = props.dialogPage.messages.map((message) => (\r\n    <Message message={message.message} key={message.id} />\r\n  ));\r\n\r\n  const onSendMessage = (values) => {\r\n    props.sendMessage(values.newMessageText);\r\n  };\r\n\r\n  return (\r\n    <main className={classes.dialogWrapper}>\r\n      <section className={classes.dialogs}>{dialogElement}</section>\r\n\r\n      <section className={classes.messages}>\r\n        <div>{messageElement}</div>\r\n        <MessageFormRedux onSubmit={onSendMessage} />\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  dialogPage: state.dialogPage,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  sendMessage: (newMessageText) => {\r\n    dispatch(sendMessageCreator(newMessageText));\r\n  },\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}